tooling onsave jtree build produceTilesGrammar
tilesNode
 root
 todo skipBlankLines
 _rootNodeJsHeader
  const projectRootDir = jtree.Utils.findProjectRoot(__dirname, "ohayo")
  const { AbstractTreeComponent } = require(projectRootDir + "node_modules/jtree/products/TreeComponentFramework.node.js")
  const TilesConstants = require(projectRootDir + "ohayoWebApp/tiles/TilesConstants.js")
  const OhayoConstants = require(projectRootDir + "ohayoWebApp/treeComponents/OhayoConstants.js")
  const Layout = require(projectRootDir + "ohayoWebApp/tiles/Layout.js")
  const Icons = require(projectRootDir + "ohayoWebApp/themes/Icons.js")
  const lodash = require(projectRootDir + "node_modules/lodash")
 _extendsJsClass AbstractTreeComponent
 catchAllNodeType DidYouMeanTileNode
 string wallType wall
 javascript
  getTileClosestToLine(lineIndex) {
   let current = this.nodeAtLine(lineIndex)
   while (current) {
    if (current.doesExtend("abstractTileTreeComponentNode")) return current
    current = current.getParent()
    if (current.doesExtend("tiles")) return undefined
   }
  }
  setTab(tab) {
   this._tab = tab
  }
  getTheme() {
   const tab = this.getTab()
   return tab ? tab.getTheme() : super.getTheme()
  }
  getTab() {
   return this._tab
  }
  tilesAreVisible() {
    return !this.has("defaultHidden")
  }
  canUseCustomLayout() {
   const definedLayout = this.get(TilesConstants.layout)
   if (definedLayout === TilesConstants.layouts.custom) return true
   if (this.getTiles().some(tile => tile.has(TilesConstants.left) || tile.has(TilesConstants.top))) return true
   return false
  }
  _getLayoutStrategy() {
   const definedLayout = this.get(TilesConstants.layout)
   return definedLayout || (this.wallType === OhayoConstants.flex ? (this.canUseCustomLayout() ? TilesConstants.layouts.custom : TilesConstants.layouts.tiled) : TilesConstants.layouts.tree)
  }
  getTileDimensionMap(width, height) {
   // todo: cache?
   return new Layout().getTileDimensionMap(this, this._getLayoutStrategy(), width, height)
  }
  async loadAndIncrementalRender() {
   const app = this.getTab().getRootNode()
   await Promise.all(this.getTiles().map(tile => tile.loadRequirements()))
   await Promise.all(
    this.getRootLevelTiles().map(async tile => {
     await tile.execute()
     app.renderApp()
    })
   )
   app.renderApp() // this one might be superfluous
   return this
  }
  getTiles() {
   return this.getTopDownArray().filter(node => node.doesExtend("abstractTileTreeComponentNode"))
  }
  getRootLevelTiles() {
   return this.filter(node => node.doesExtend("abstractTileTreeComponentNode"))
  }
  _getProjectRootDir() {
   return this.isNodeJs() ? jtree.Utils.findProjectRoot(__dirname, "ohayo") : ""
  }
  toRunTimeStats() {
   const tiles = this.getTiles()
   const stats = {
    tiles: tiles.length,
    treeLanguage: this.getGrammarProgram().getExtensionName(),
    url: this.getTab().getFileName()
   }
   stats.timeToLoad = this.getTiles()
    .map(tile => tile.getTimeToLoad())
    .sort()
    .reverse()[0]
   stats.timeToRender = this.getTiles()
    .map(tile => tile.getNewestTimeToRender())
    .sort()
    .reverse()[0]
   return stats
  }