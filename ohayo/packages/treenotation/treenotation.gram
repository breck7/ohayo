tooling onsave jtree build produceOhayoGrammar
supportedTreeLanguageCell
 enum ohayo
cameraDistanceNumberCell
 extends numberCell
horizontalNumberCell
 extends numberCell
verticalNumberCell
 extends numberCell
cameraPositionNode
 cells tileSettingKeywordCell cameraDistanceNumberCell horizontalNumberCell verticalNumberCell
 extends abstractTileSettingTerminalNode
 crux cameraPosition
treeLanguageNode
 cells tileSettingKeywordCell supportedTreeLanguageCell
 extends abstractTileSettingTerminalNode
 crux treeLanguage
treenotation3dNode
 description A 3D visualization of Ohayo source code.
 example 3D vis of a Ohayo Program.
  samples.treeProgram
   treenotation.3d
 inScope contentNode sizeNode cameraPositionNode
 string tileSize 800 500
 string tileScript ohayo/packages/treenotation/vis.min.js
 string dummyDataSetName treeProgram
 extends abstractChartNode
 crux treenotation.3d
 javascript
  getTileBodyStumpCode() {
   return `div
  class visjs`
  }
  treeComponentDidMount() {
   super.treeComponentDidMount()
   this.treeComponentDidUpdate()
  }
  // Called when the Visualization API is loaded.
  treeComponentDidUpdate() {
   super.treeComponentDidUpdate()
   if (this.isNodeJs()) return undefined
   try {
    this._tryVis()
   } catch (err) {
    // log error
    console.error(err)
   }
  }
  _tryVis() {
   const tileStruct = this.getSettingsStruct()
   const source = this.getPipishInput()
   const app = this.getWebApp()
   const program = new ohayoNode(source)
   const rows = this._treeTo3D(program)
   // Create and populate a data table.
   const data = new vis.DataSet()
   rows.forEach(row => data.add(row))
   const dotSize = tileStruct.size
   const showGrid = tileStruct.showGrid
   // specify options
   // docs: http://visjs.org/docs/graph3d/
   const tileDimension = this.getTileDimensionIfAny()
   const cameraPositionNode = this.getNode("cameraPosition") || new jtree.TreeNode("cameraPosition 4 .1 1.5").getNode("cameraPosition")
   const distance = parseFloat(cameraPositionNode.getWord(1))
   const horizontal = parseFloat(cameraPositionNode.getWord(2))
   const vertical = parseFloat(cameraPositionNode.getWord(3))
   const options = {
    width: tileDimension.width + "px",
    height: tileDimension.height - 80 + "px",
    style: "dot-color", // dot?
    showPerspective: false,
    showLegend: false,
    showShadow: false,
    keepAspectRatio: true,
    xStep: 1,
    yStep: 1,
    zStep: 1,
    zMax: 5,
    showGrid: true,
    showZAxis: false,
    showXAxis: false,
    showYAxis: false,
    dotSizeRatio: dotSize,
    dotSizeMinFraction: 1,
    cameraPosition: {
     distance: distance,
     horizontal: horizontal,
     vertical: vertical
    },
    verticalRatio: 1.0,
    // parameter point contains properties x, y, z, and data
    // data is the original object passed to the point constructor
    tooltip: point => point.data.line
   }
   // create a graph3d
   const element = this.getStumpNode()
    .findStumpNodeByChild("class visjs")
    .getShadow()
    .getShadowElement()
   this._graph3d = new vis.Graph3d(element, data, options)
   const throttled = lodash.throttle(evt => this._onCameraPositionChange(evt), 100)
   this._graph3d.on("cameraPositionChange", throttled)
  }
  async _onCameraPositionChange(evt) {
   // todo: throttle
   const pos = this._graph3d.getCameraPosition()
   const str = `${pos.distance} ${pos.horizontal} ${pos.vertical}`
   this.touchNode("cameraPosition").setContent(str)
   await this.getTab().autosaveTab()
  }
  _treeTo3D(program) {
   // getCameraPosition
   // setCameraPosition
   // onCameraPositionChange
   const theme = this.getWebApp().getTheme()
   // todo: use node type for color.
   const tagMap = {}
   const tagTree = new jtree.TreeNode(program.toCellTypeTree())
   // const outlineFn = node => node.getIndex()
   // use language to get dict, use dict to get type overlay to get tag types.
   const randomFn = jtree.Utils.makeSemiRandomFn()
   const makeColor = word => {
    if (!tagMap[word]) tagMap[word] = randomFn() // todo: give word types certain colors. green for keword, red for error, etc
    const color = tagMap[word]
    //console.log(color)
    return color
   }
   const points = []
   const nodeToPoint = (node, index) => {
    const nodePath = node.getPathVector(program)
    const tagNode = tagTree.nodeAt(nodePath)
    node.getWords().forEach((word, wordIndex) => {
     const wordType = tagNode.getWord(wordIndex)
     const colorNumber = makeColor(wordType)
     const xcc = node.getIndentLevel(program) + wordIndex
     const ycc = -node.getLineNumber()
     const zcc = 0
     points.push({
      x: xcc,
      y: ycc,
      z: zcc,
      line: `cellType: ${wordType} | word: ${word}`,
      style: colorNumber
     })
    })
   }
   program.getTopDownArray().forEach(nodeToPoint)
   return points
  }
treenotationWordTypesNode
 description Generates the word types for a Ohayo Language program.
 example See counts of word types in a Ohayo Language program.
  treenotation.wordTypes
   treenotation.outline
   text.wordCount
    tables.basic
 string dummyDataSetName treeProgram
 extends abstractNewRowsTransformerTileNode
 crux treenotation.wordTypes
 javascript
  makeNewRows() {
   return [{ text: new ohayoNode(this.getPipishInput()).toCellTypeTree() }]
  }
treenotationOutlineNode
 description A simple pretty text-only view of a Tree Notation document.
 example Outer space
  samples.outerSpace
   treenotation.outline
 string dummyDataSetName outerSpace
 string tileSize 800 500
 extends abstractHeaderlessChartTileNode
 crux treenotation.outline
 string bodyStumpTemplate
  pre
   style overflow: scroll; width: 100%; height: 100%; margin: 0; box-sizing: border-box; font-family: monospace; line-height: 13px;
   bern
    {bern}
 javascript
  _getTheBern() {
   return new jtree.TreeNode(this.getPipishInput()).toOutline()
  }
  getTileBodyStumpCode() {
   return this.qFormat(this.bodyStumpTemplate, {bern: this._getTheBern()})
  }
treenotationDotlineNode
 description A simple pretty icon-only visualization of the structure of a Tree Notation doc.
 example Outer space
  samples.outerSpace
   treenotation.dotline
 boolean dots true
 string dummyDataSetName outerSpace
 javascript
  _getTheBern() {
   return new jtree.TreeNode(this.getPipishInput()).toMappedOutline(
    node =>
     "o" +
     node
      .getLine()
      .split(" ")
      .map(word => "ยบ")
      .join("")
   )
  }
 extends treenotationOutlineNode
 crux treenotation.dotline