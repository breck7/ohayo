tooling onsave jtree build produceOhayoGrammar
delimiterCell
startIndexCell
 extends intCell
lengthCell
 extends intCell
textWordcloudNode
 description Turn text into a word cloud.
 inScope columnNode countNode
 example A poem analyzed
  samples.poem
   text.wordCount
    text.wordcloud
 string bodyStumpTemplate
  div
   class divWhereWordCloudWillGo
   style height: 300px;
 javascript
  getTileBodyStumpCode() {
   return this.bodyStumpTemplate
  }
  _getAllWords() {
   return this.getRequiredTableWithHeader(["name", "count"])
  }
  treeComponentDidUpdate() {
   this._draw()
  }
  treeComponentDidMount() {
   this._draw()
  }
  _draw() {
   if (this.isNodeJs()) return undefined
   const tileStruct = this.getSettingsStruct()
   const words = this._getAllWords()
   if (!words.length) return
   words.shift() // drop header
   const shadow = this.getStumpNode().getShadow()
   const width = shadow.getShadowOuterWidth()
   const powConstant = 10 / Math.log(words.length) // breaks if too hgih.
   const options = {
    list: words.map(word => [word[0], word[1]]),
    shuffle: false,
    gridSize: Math.round((16 * width) / 1024),
    weightFactor: size => (Math.pow(size, powConstant) * width) / 1024,
    backgroundColor: "transparent",
    random: jtree.Utils.makeSemiRandomFn(),
    wait: 0
   }
   Object.assign(options, tileStruct)
   const element = this.getStumpNode()
    .findStumpNodeByChild("class divWhereWordCloudWillGo")
    .getShadow()
    .getShadowElement()
   WordCloud(element, options)
  }
 string tileScript ohayo/packages/text/wordcloud2.min.js
 string dummyDataSetName wordCounts
 string columnPredictionHints
  name isString=true
  count isString=false
 extends abstractChartNode
 crux text.wordcloud
textLengthNode
 cells tileKeywordCell columnNameCell
 description Add a column which contains the string length of the given column.
 example Show the largest words in declaration of independence
  samples.declaration
   text.wordCount
    text.length word
     filter.where wordLength > 5
      rows.sortByReverse wordLength
       tables.basic
 javascript
  getNewColumns() {
   const sourceColumnName = this.getWord(1)
   const destinationColumnName = sourceColumnName + "Length"
   return [
    {
     source: sourceColumnName,
     name: destinationColumnName,
     accessorFn: row => row[sourceColumnName].length
    }
   ]
  }
 extends abstractColumnAdderTileNode
 crux text.length
textSplitNode
 description Split one column into multiple by a string
 cells tileKeywordCell columnNameCell delimiterCell
 catchAllCellType newColumnNamesCell
 example Split a filename into name and extension
  vega.data descriptions.json
   text.split filename . name extension
    tables.basic
 string dummyDataSetName poem
 javascript
  // note: delimiter can probably be ""
  // todo: how would we split on a space???
  // perhaps its better to use getContent() as delimiter, and if you want to name the columns, you can do that later?
  getNewColumns() {
   const sourceColumnName = this.getWord(1)
   const delimiter = this.getWord(2)
   const destinationColumns = this.getWordsFrom(3)
   return destinationColumns.map((destinationColumnName, index) => {
    return {
     source: sourceColumnName,
     name: destinationColumnName,
     accessorFn: row => {
      const words = row[sourceColumnName].split(delimiter)
      return this.reverseSplit ? words.reverse()[index] : words[index]
    }
    }
   })
   return [
    {
     source: sourceColumnName,
     name: destinationColumnName,
     accessorFn: row => row[sourceColumnName].length
    }
   ]
  }
 extends abstractColumnAdderTileNode
 crux text.split
reverseTextSplitNode
 extends textSplitNode
 crux text.reverseSplit
 description Split one column into multiple by a string reversing the order.
 boolean reverseSplit true 
textToLowerCaseNode
 description Convert all cells in a column to LowerCase text
 cells tileKeywordCell columnNameCell
 example Select the first character of someone's name
  samples.declaration
   text.wordCount
    tables.basic
   text.toLowerCase text
    tables.basic
 string dummyDataSetName poem
 javascript
  getNewColumns() {
   const sourceColumnName = this.getWord(1) || "text"
   return [
    {
     source: sourceColumnName,
     name: sourceColumnName,
     accessorFn: row => row[sourceColumnName].toLowerCase()
    }
   ]
  }
 extends abstractColumnAdderTileNode
 crux text.toLowerCase
textSubstringNode
 description Extract parts of one column into another column called "substring".
 cells tileKeywordCell columnNameCell startIndexCell lengthCell
 example Select the first character of someone's name
  samples.presidents
   text.substring name 0 1
    tables.basic
 string dummyDataSetName poem
 extends abstractColumnAdderTileNode
 crux text.substring
 string destinationColumnName substring
 javascript
  getNewColumns() {
   const sourceColumnName = this.getWord(1)
   const startPosition = typeof this.startIndex !== undefined ? this.startIndex : parseInt(this.getWord(2))
   const endPosition = typeof this.endIndex !== undefined ? this.endIndex : this.getWord(3) === undefined ? undefined : parseInt(this.getWord(3))
   return [
    {
     source: sourceColumnName,
     name: this.destinationColumnName,
     accessorFn: row => (row[sourceColumnName] ? row[sourceColumnName].toString().substr(startPosition, endPosition) : "")
    }
   ]
  }
testFirstLetterNode
 extends textSubstringNode
 crux text.firstLetter
 description Extracts the first letter of a column into a new column called "firstLetter"
 cells tileKeywordCell columnNameCell
 string destinationColumnName firstLetter
 int startIndex 0
 int endIndex 1
textMatchesNode
 description Scans the input text for a pattern and returns number of hits.
 crux text.matches
 cells tileKeywordCell
 catchAllCellType anyCell
 extends abstractTransformerNode
 javascript
  _createOutputTable() {
    return new Table([{ count: this.getPipishInput().match(new RegExp(this.getContent(), "g")).length }])
  }
textCombineNode
 description Combine all cells in a column into 1 text block
 extends abstractTransformerNode
 crux text.combine
 cells tileKeywordCell columnNameCell
 javascript
  _createOutputTable() {
    // todo: cleanup
    const text = this.getParentOrDummyTable().getRows().map(row => row.getRowOriginalValue(this.columnNameCell)).join("\n")
    return new Table([{ text}])
  }
textWordCountNode
 description Splits a string into words and counts the number of uses of each word.
 string dummyDataSetName poem
 extends abstractNewRowsTransformerTileNode
 crux text.wordCount
 javascript
  makeNewRows() {
   return this._getAllWords(this.getPipishInput())
  }
  _getAllWords(text) {
   const rows = []
   if (!text) return rows
   const words = text
    .split(/\s/g)
    .map(word => word.replace(/[^a-z0-9\-]/gi, ""))
    .filter(word => word)
   const index = {}
   words.forEach(word => {
    if (!index[word]) index[word] = 1
    else index[word]++
   })
   Object.keys(index).forEach(word => {
    const trimmedWord = word.trim()
    if (trimmedWord)
     rows.push({
      word: trimmedWord,
      count: index[trimmedWord]
     })
   })
   return rows
  }
textLineCountNode
 description Counts the number of lines in the input data.
 string dummyDataSetName poem
 javascript
  makeNewRows() {
   return [{ lines: this.getPipishInput().split(/\n/g).length }]
  }
 extends abstractNewRowsTransformerTileNode
 crux text.lineCount
 example
  text.lineCount
   tables.basic