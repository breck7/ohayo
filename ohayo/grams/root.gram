tooling onsave jtree build produceOhayoGrammar
ohayoNode
 root
 _extendsJsClass AbstractTreeComponent
 _rootNodeJsHeader
  const projectRootDir = jtree.Utils.findProjectRoot(__dirname, "ohayo")
  const { AbstractTreeComponent } = require(projectRootDir + "node_modules/jtree/products/TreeComponentFramework.node.js")
  const OhayoConstants = require(projectRootDir + "studio/treeComponents/OhayoConstants.js")
  const StudioConstants = require(projectRootDir + "studio/treeComponents/StudioConstants.js")
  const Icons = require(projectRootDir + "studio/themes/Icons.js")
  const lodash = require(projectRootDir + "node_modules/lodash")
  const { Table, DummyDataSets, Row, TableParser } = require("jtree/products/jtable.node.js")
  const marked = require("marked")
  const moment = require("moment")
  // https://github.com/gentooboontoo/js-quantities
  // https://github.com/moment/moment/issues/2469
  // todo: ugly. how do we ditch this or test?
  moment.createFromInputFallback = function(momentConfig) {
    momentConfig._d = new Date(momentConfig._i)
  }
  const numeral = require("numeral")
 catchAllNodeType DidYouMeanTileNode
 description Ohayo is a programming language for doing data science.
 inScope abstractTileTreeComponentNode tileBlankLineNode abstractDocSettingNode hashBangNode
 javascript
  getTileClosestToLine(lineIndex) {
   let current = this.nodeAtLine(lineIndex)
   while (current) {
    if (current.doesExtend("abstractTileTreeComponentNode")) return current
    current = current.getParent()
   }
  }
  setTab(tab) {
   this._tab = tab
  }
  getTheme() {
   const tab = this.getTab()
   return tab ? tab.getTheme() : super.getTheme()
  }
  getTab() {
   return this._tab
  }
  async loadAndIncrementalRender() {
   const app = this.getTab().getRootNode()
   await Promise.all(this.getTiles().map(tile => tile.loadBrowserRequirements()))
   await Promise.all(
    this.getRootLevelTiles().map(async tile => {
     await tile.execute()
     app.renderApp()
    })
   )
   app.renderApp() // this one might be superfluous
   return this
  }
  getTiles() {
   return this.getTopDownArray().filter(node => node.doesExtend("abstractTileTreeComponentNode"))
  }
  getRootLevelTiles() {
   return this.filter(node => node.doesExtend("abstractTileTreeComponentNode"))
  }
  _getProjectRootDir() {
   return this.isNodeJs() ? jtree.Utils.findProjectRoot(__dirname, "ohayo") : ""
  }
  toRunTimeStats() {
   const tiles = this.getTiles()
   const stats = {
    tiles: tiles.length,
    treeLanguage: this.getHandGrammarProgram().getExtensionName(),
    url: this.getTab().getFileName()
   }
   stats.timeToLoad = this.getTiles()
    .map(tile => tile.getTimeToLoad())
    .sort()
    .reverse()[0]
   stats.timeToRender = this.getTiles()
    .map(tile => tile.getNewestTimeToRender())
    .sort()
    .reverse()[0]
   return stats
  }
  async execute() {
    await Promise.all(this.map(node => node.execute()))
    // Use shell tiles to do any outputs
  }
  _getProgramRowCount() {
   return this.getAllRowsFromAllOutputTables().reduce((acc, curr) => acc + curr.length, 0)
  }
  getOutputOrInputTable() {
   // todo: remove this?
   if (!this._outputTable) this._outputTable = new Table()
   return this._outputTable
  }
  getAllRowsFromAllOutputTables() {
   return jtree.Utils.flatten(
    this.getTiles()
     .map(tile => tile.getOutputTable())
     .filter(table => table)
     .map(table => table.getRows())
   )
  }