tooling onsave jtree build produceMaiaGrammar
needleColumnNameCell
 extends columnNameCell
haystackColumnNameCell
 extends columnNameCell
matchColumnsFuzzyNode
 description Attempts to fuzzy match words in one column of parent table against words in a column in grandparent table.
 cells tileKeywordCell needleColumnNameCell haystackColumnNameCell
 example Try to match different spellings of country names.
  samples.gapMinder
   samples.populations
    match.columnsFuzzy Country country
     rows.sortBy confidence
      rows.reverse
       tables.basic
 string tileScript maia/packages/match/fuse.min.js
 extends abstractNewRowsTransformerTileNode
 crux match.columnsFuzzy
 javascript
  makeNewRows() {
   // Todo: move some of this logic to table project?
   const parentTile = this.getParent()
   if (parentTile.isRoot()) return []
   const grandParentTile = parentTile.getParent()
   if (grandParentTile.isRoot()) return parentTile.getOutputOrInputTable().cloneNativeJavascriptTypedRows()
   const tiles = [parentTile, grandParentTile]
   const arrays = tiles.map(tile => tile.getOutputOrInputTable().cloneNativeJavascriptTypedRows())
   return this._addFuzz(arrays[0], arrays[1])
  }
  get fuse() {
   return this.isNodeJs() ? require("fuse.js") : Fuse
  }
  _addFuzz(needles, haystacks) {
   const needleColumnName = this.getWord(1) || "name"
   const haystackColumnName = this.getWord(2) || "name"
   const options = {
    shouldSort: true,
    includeScore: true,
    threshold: 0.6,
    location: 0,
    distance: 100,
    maxPatternLength: 32,
    minMatchCharLength: 1,
    keys: [haystackColumnName]
   }
   const fuse = new this.fuse(haystacks, options) // "list" is the item array
   return needles.map(needle => {
    const searchValue = needle[needleColumnName]
    const result = fuse.search(searchValue)
    if (!result.length)
     return {
      search: searchValue,
      match: ""
     }
    const match = result[0]
    return {
     search: searchValue,
     match: match.item[haystackColumnName],
     confidence: parseFloat((1 - match.score).toFixed(3))
    }
   })
  }