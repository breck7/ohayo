tooling onsave jtree build produceMaiaGrammar
challengeIdCell
 extends intCell
challengeAnswerCell
 extends numberCell
challengePlayNode
 cells tileKeywordCell challengeIdCell
 description Learn ohayo by trying a challenge.
 catchAllCellType challengeAnswerCell
 tags aTileThatCreatesPrograms
 example
  challenge.list
  challenge.play 1
  challenge.play 2
  layout tiled
 string tileSize 640 240
 extends abstractBodyOnlyTileNode
 crux challenge.play
 javascript
  getProgramTemplate(id) {
   const challengeNode = this._getChallengeNode(parseInt(id))
   return {
    template: challengeNode.getNode("solution").childrenToString(),
    name: "challenge-" + id + "-solution.maia"
   }
  }
  _getChallengeNode(challengeId) {
   const challenges = typeof challengesTree === "undefined" ? jtree.TreeNode.fromDisk("maia/packages/challenge/challenges.tree") : new jtree.TreeNode(challengesTree)
   return challenges.nodeAt(challengeId - 1) || challenges.nodeAt(0)
  }
  getTileBodyStumpCode() {
   const challengeId = parseInt(this.getWord(1))
   const answer = this.getWord(2)
   const challengeNode = this._getChallengeNode(challengeId)
   const isCorrect = answer === challengeNode.get("answer")
   const theme = this.getTheme()
   const color = answer ? (isCorrect ? theme.successColor : theme.errorColor) : theme.warningColor
   const answerMessage = answer !== undefined ? (isCorrect ? "CORRECT!" : "Wrong.") : ""
   return `h3 Challenge #${challengeId}
   style color:${color}
  br
  div ${challengeNode.evalTemplateString(`Question: {question}`)}
   class TileSelectable
  br
  input
   placeholder Enter your answer here. All answers are a number.
   value ${answer !== undefined ? answer : ""}
   style width: 300px;
   name 2
   stumpOnChangeCommand changeWordAndRenderCommand
  span ${answerMessage}
   style color: ${color};
  br
  div
   a See a solution
    stumpOnClickCommand createProgramFromTemplateCommand
    value ${challengeId}`
  }
challengeListNode
 description View all challenges
 string title Try a challenge:
 string itemFormat {id}. {question}
 extends abstractSnippetGalleryNode
 crux challenge.list
 javascript
  getGalleryNodes() {
   return typeof challengesTree === "undefined" ? jtree.TreeNode.fromDisk("maia/packages/challenge/challenges.tree") : new jtree.TreeNode(challengesTree)
  }
  getSnippetTemplate(id) {
   return `challenge.play ${id}`
  }