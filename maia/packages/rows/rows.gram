tooling onsave jtree build produceMaiaGrammar
rowsFirstNode
 cells tileKeywordCell intCell
 description Return the first N rows.
 extends abstractRowFilterTileNode
 crux rows.first
 javascript
  getRowFilterFn() {
   const limit = parseInt(this.getContent())
   if (isNaN(limit)) return undefined
   return (row, rowIndex) => rowIndex < limit
  }
rowsShuffleNode
 description Shuffle the rows into a random order.
 extends abstractTransformerNoParamsTileNode
 crux rows.shuffle
 javascript
  _createOutputTable() {
   return this.getParentOrDummyTable().shuffleRows()
  }
rowsSortByNode
 catchAllCellType columnNameCell
 description Sort the rows by a column(s) from smallest to largest.
 example See cheaptest and most expensive months in a family's water bills
  samples.waterBill
   rows.sortBy Amount
    rows.first 1
     tables.basic Cheapest month
    rows.reverse
     rows.first 1
      tables.basic Most expensive
  doc.layout tiled
 extends abstractTransformerNode
 crux rows.sortBy
 string placeholderMessage Columns you want to sort by
 javascript
  _createOutputTable() {
   const table = this.getParentOrDummyTable().sortBy(this.getWordsFrom(1))
   if (this.getFirstWord().includes("Reverse")) return table.reverseRows()
   return table
  }
rowsAddOneNode
 description Add a single row to the parent table, in space-separated value format
 catchAllCellType anyCell
 extends abstractTransformerNode
 crux rows.addOne
 javascript
  _createOutputTable() {
   return this.getParentOrDummyTable().addRow(this.getWordsFrom(1))
  }
rowsReverseNode
 description Reverse the order of the rows
 extends abstractTransformerNoParamsTileNode
 crux rows.reverse
 javascript
  _createOutputTable() {
   return this.getParentOrDummyTable().reverseRows()
  }
rowsSortByReverseNode
 description Sort the rows by a column(s) from largest to smallest.
 extends rowsSortByNode
 crux rows.sortByReverse
rowsDropIfMissingNode
 cells tileKeywordCell
 string placeholderMessage Leave blank to filter a row if it is missing any column, or specifiy column name(s).
 description Drop a row if it is missing any values in any column, or missing a value in one of the specified columns.
 extends abstractRowFilterTileNode
 catchAllCellType columnNameCell
 crux rows.dropIfMissing
 example
  data.inline
   content
    name,age
    bob,
    mike,55
   assert.rowCount 2
   rows.dropIfMissing
    show.rowCount
    assert.rowCount 1
 javascript
  getRowFilterFn() {
   const column = this.getContent()
   if (column)
    return row => row[column] !== "" && row[column] !== undefined
   return row => Object.values(row).some(value => value === "" || value === undefined)
  }
rowsAddIndexColumnNode
 description Add an index column to the data.
 extends abstractColumnAdderTileNode
 crux rows.addIndexColumn
 javascript
  getNewColumns() {
   let index = 0
   return [
    {
     name: "index",
     accessorFn: row => index++
    }
   ]
  }
rowsRunningTotalNode
 cells tileKeywordCell columnNameCell
 description Add a column that accumulates the running total of a column.
 extends abstractColumnAdderTileNode
 crux rows.runningTotal
 javascript
  getNewColumns() {
   const sourceColumnName = this.getWord(1)
   let total = 0
   return [
    {
     source: sourceColumnName,
     name: "total",
     accessorFn: row => {
      total += row[sourceColumnName]
      return total
     }
    }
   ]
  }
rowsLastNode
 cells tileKeywordCell intCell
 description Return the last N rows.
 extends abstractRowFilterTileNode
 crux rows.last
 javascript
  getRowFilterFn() {
   const limit = parseInt(this.getContent())
   if (isNaN(limit)) return undefined
   const start = this.getParentOrDummyTable().getRowCount() - limit
   return (row, rowIndex) => rowIndex >= start
  }