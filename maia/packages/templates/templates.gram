tooling onsave jtree build produceMaiaGrammar
abstractTemplatePickerTileNode
 extends abstractProviderNode
 todo This is duplicate code from picker. Add mixins to Grammar?
 string tileSize 480 420
 abstract
 string hakonTemplate
  .abstractTemplatePickerTileNode
   .PickerCategory
    width 100%
    margin-top 20px
    text-align center
   .TileBody
    display flex
    flex-flow row wrap
    a
     &:hover
      background-color {borderColor}
     padding 10px
     margin 5px
     height 30px
     background-color {backgroundColor}
     border 1px solid {borderColor}
     overflow hidden
     text-align center
     text-overflow ellipsis
     font-size 14px
     width 120px
     span
      font-size 70%
 string itemStumpTemplate
  {categoryBreak}
  a {name}
   br
    span {description}
   title {description}
   tabindex -1
   value {value}
   class pickerItemButton
   clickCommand {command}
 string categoryBreakStumpTemplate
  div {category}
   class PickerCategory
 string tileHeader Gallery
 javascript
  async fetchTableInputs() {
   return { rows: this.getChoices() }
  }
  getTileBodyStumpCode() {
   let lastCat = ""
   return this.getChoices()
    .map(choice => {
     choice.categoryBreak = lastCat !== choice.category ? this.qFormat(this.categoryBreakStumpTemplate, { category: choice.category }) : ""
     lastCat = choice.category
     return this.qFormat(this.itemStumpTemplate, choice)
    })
    .join("\n")
  }
  getTileHeaderBern() {
   return this.tileHeader
  }
templatesListNode
 extends abstractTemplatePickerTileNode
 description Displays list of available templates.
 frequency .11
 crux templates.list
 string tileHeader Template Gallery
 javascript
  getChoices() {
   // todo: cleanup.
   const choices = this._getTheTemplates().map(node => {
     const id = node
      .getWord(1)
      .replace("templates/", "")
      .replace(this.maiaFileExtensionKey, "")
     return {
      command: "createProgramFromTemplateCommand",
      name: node.get("data doc.title"),
      value: id,
      category: lodash.upperFirst(node.get("data doc.categories")),
      description: ""
     }
    })
    return lodash.sortBy(choices, "category")
  }
  _getTheTemplates() {
   // todo: trim?
   return typeof TemplatesStamp === "undefined" ? jtree.TreeNode.fromDisk("maia/packages/templates/Templates.stamp").trim() : new jtree.TreeNode(TemplatesStamp).trim()
  }
  getProgramTemplate(id) {
   const node = this._getTheTemplates().filter(node => node.getContent() === `templates/${id}${this.maiaFileExtensionKey}`)[0]
   return {
    template: node.getNode("data").childrenToString(),
    name: id + this.maiaFileExtensionKey
   }
  }