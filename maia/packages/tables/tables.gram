tooling onsave jtree build produceMaiaGrammar
tablesBasicNode
 frequency .1
 description Basic table with sorting.
 example Basic table with Iris data
  samples.iris
   tables.basic
 catchAllCellType titleCell
 inScope columnLimitNode
 int rowDisplayLimit 100
 int columnLimit 20
 string tileSize 750 300
 todo added the below to allow custom body styling in tables
 string customBodyStyle padding:0px;
 javascript
  getTileHeaderBern() {
   return this.getContent() || super.getTileHeaderBern()
  }
  toHakonCode() {
   const theme = this.getTheme()
   return `.tablesBasicNode
   font-size 14px
   box-sizing border-box
   width 100%
   height 100%
  ${theme.enableTextSelect(1)}
   top 34px
   table
    width 100%
   tr
    white-space nowrap
    padding 0
   td
    border 1px solid ${theme.lineColor}
   tr:nth-child(even)
    background-color ${theme.veryLightGrey}
   td,th
    padding 2px 3px
    text-align left
    overflow hidden
    text-overflow ellipsis
    max-width 250px
   td:hover,th:hover
    overflow visible
   td:first-child,th:first-child
    padding-left 5px
    color ${theme.greyish}
    width 60px
   th
    cursor pointer
    background-color ${theme.lightGrey}
    border 1px solid ${theme.lineColor}
    border-bottom-color ${theme.greyish}
   input,textarea
    border 0
    font-size 14px
    box-sizing border-box
    padding 0
    font-family ${theme.fonts}`
  }
  _getTableRowsStumpCode(columns) {
   return this.getRowsWithRowDisplayLimit()
    .map((row, index) => {
     const cols = columns
      .map(column => {
       const box = row.getRowHtmlSafeValue(column.getColumnName()) // todo: cache?
       if (column.isLink())
        return `td
   a
    href ${box}
    bern${jtree.TreeNode.nest(box, 3)}`
       return `td
   bern${jtree.TreeNode.nest(box, 2)}`
      })
      .join("\n")
     return `tr
   class tableRow
   value ${row.getPuid()}
   td ${index + 1}${jtree.TreeNode.nest(cols, 1)}`
    })
    .join("\n")
  }
  getContextMenuStumpCode() {
   return `a Delete all rows
   stumpOnClickCommand deleteAllRowsInTargetTileCommand`
  }
  _getHeaderRowsStumpCode(columns) {
   // todo: can we get a copy column command?
   return (
    "th #\n" +
    columns
     .map(
      colName =>
       `th
   value ${colName}
   span ${colName}
    value ${colName}`
     )
     .join("\n")
   )
  }
  getTileBodyStumpCode() {
   const tileStruct = this.getSettingsStruct()
   const table = this.getParentOrDummyTable()
   if (table.isBlankTable()) return `div No data to show`
   let columnDefs = tileStruct.columnOrder === "importance" ? table.getColumnsByImportance() : table.getColumnsArray()
   columnDefs = columnDefs.slice(0, tileStruct.columnLimit || this.columnLimit)
   const columnNames = columnDefs.map(col => col.getColumnName())
   // todo: if the types for a column are all equal, add a total row to the bottom.
   // todo: if the types for a row are all equal, add a total column to the right.
   const header = this._getHeaderRowsStumpCode(columnNames)
   const rowsStumpCode = this._getTableRowsStumpCode(columnDefs)
   return `div
   class tablesBasicNode
   table
    thead
     tr
      title Click to sort.${jtree.TreeNode.nest(header, 4)}
    tbody ${jtree.TreeNode.nest(rowsStumpCode, 2)}`
  }
 extends abstractChartNode
 crux tables.basic
tablesInterestingNode
 frequency .01
 description Prints most interesting columns.
 string columnOrder importance
 extends tablesBasicNode
 crux tables.interesting
tablesDumpNode
 description Prints data with no formatting or column reordering.
 frequency .01
 string columnOrder default
 extends tablesBasicNode
 crux tables.dump