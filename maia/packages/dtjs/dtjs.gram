tooling onsave jtree build produceMaiaGrammar
dtjsBasicNode
 description A spreadsheet-like table.
 string tileSize 1200 500
 string tileCssScript maia/packages/dtjs/datatables.min.css
 string tileScript maia/packages/dtjs/datatables.min.js
 extends abstractBodyOnlyTileNode
 crux dtjs.basic
 javascript
  getTileBodyStumpCode() {
   const columnDefs = this.getParentOrDummyTable()
    .getColumnsArray()
    .slice(0, 10)
   const header = this._getHeaderRowsStumpCode(columnDefs.map(col => col.getColumnName()))
   const rowsStumpCode = this._getTableRowsStumpCode(columnDefs)
   return `div
  table
   class DataTable
   thead
    tr${jtree.TreeNode.nest(header, 4)}
   tbody ${jtree.TreeNode.nest(rowsStumpCode, 2)}`
  }
  _getHeaderRowsStumpCode(columns) {
   return columns.map(colName => `th ${colName}`).join("\n")
  }
  _getTableRowsStumpCode(columns) {
   return this.getRowsWithRowDisplayLimit()
    .slice(0, 10)
    .map((row, index) => {
     const cols = columns
      .map(column => {
       const box = row.getRowHtmlSafeValue(column.getColumnName()) // todo: cache?
       return `td
  bern${jtree.TreeNode.nest(box, 2)}`
      })
      .join("\n")
     return `tr${jtree.TreeNode.nest(cols, 1)}`
    })
    .join("\n")
  }
  treeComponentWillUnmount() {
   // cleanup
  }
  treeComponentDidUpdate() {
   super.treeComponentDidUpdate()
   const table = this.getParentOrDummyTable()
   const columnDefs = this.getParentOrDummyTable()
    .getColumnsArray()
    .slice(0, 10)
   const container = this.getStumpNode().findStumpNodeByChild("class DataTable")
   if (this.isNodeJs()) return undefined
   const tileDimension = this.getTileDimensionIfAny()
   const width = tileDimension.width - 20 // remove 10 for boddy padding?
   const height = tileDimension.height - 150
   const shadow = container.getShadow()
   const el = shadow.getShadowElement()
   shadow.setShadowCss({ width: width, height: height })
   const rows = this.getRowsWithRowDisplayLimit()
   // todo: note, this is only works with jQuery
   jQuery.fn.dataTable.ext.errMode = "throw"
   this._dataTables = jQuery(el).DataTable({
    data: this.getRowsAsDataTableArrayWithHeader(rows, columnDefs.map(col => col.getColumnName())).slice(1),
    pageLength: 10,
    scrollY: height
    //"scrollCollapse": true,
    //"paging": false
   })
  }
  treeComponentDidMount() {
   this.treeComponentDidUpdate()
  }